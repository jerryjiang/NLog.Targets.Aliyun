<?xml version="1.0" encoding="utf-8" ?>
<nlog xmlns="http://www.nlog-project.org/schemas/NLog.xsd"
      xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
      autoReload="true"
      internalLogLevel="Debug"
      internalLogFile="./internal-nlog.txt">

    <extensions>
        <add assembly="NLog.Web.AspNetCore"/>
        <add assembly="NLog.Targets.Aliyun"/>
    </extensions>

    <targets>
        <!-- console target -->
        <target xsi:type="Console" name="console" />
        
        <!-- Aliyun target -->
        <!--
            Steps to use:
            1. Create a SLS project and logstore
            2. Enable RAM access control from Aliyun protal and create a AccessKey
            3. Endpoint, project, accessKeyId and accessKey does not support layout rendering
            4. When use layout rendering for logStore, make sure you created the specified logstore in SLS portal
            5. In the example below, the log will send to development, staging or production logstore depends on the environment, but logs without the context will be dropped
            6. Source will default to Local IP address if not set
            7. Topic will default to logger name if not set
        -->
        <target xsi:type="Aliyun" name="aliyun"
                endpoint="<your sls endpoint>"
                project="<your project name>"
                accessKeyId="<your accessKeyId>"
                accessKey="<your accessKey>"
                logStore="${lowercase:${aspnet-environment}}"
                source="<anything you want>"
                topic="<anything you want>"
                layout="${longdate} | ${message} | ${exception:format=ToString,StackTrace}"
        />
    </targets>

    <rules>
        <logger name="*" minlevel="Debug" writeTo="aliyun" />
        <logger name="*" minlevel="Debug" writeTo="console" />
    </rules>
</nlog>
